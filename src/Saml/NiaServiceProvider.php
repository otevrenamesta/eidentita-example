<?php

namespace App\Saml;

use RobRichards\XMLSecLibs\XMLSecurityKey;
use SAML2\Certificate\X509;
use SAML2\Configuration\ServiceProvider;
use SAML2\Utils;

class NiaServiceProvider extends ServiceProvider
{
    const LOA_LOW = 'http://eidas.europa.eu/LoA/low';
    const LOA_SUBSTANTIAL = 'http://eidas.europa.eu/LoA/substantial';
    const LOA_HIGH = 'http://eidas.europa.eu/LoA/high';

    public static $AssertionConsumerServiceURL = 'https://nia.otevrenamesta.cz/ExternalLogin';
    public static $IssuerURL = 'https://nia.otevrenamesta.cz/';

    public function __construct()
    {
        parent::__construct([]);
    }

    public function getPrivateKey(string $name, bool $required = null)
    {
        return file_get_contents(CONFIG . 'private.key');
    }

    public function getEntityId(): ?string
    {
        return self::$IssuerURL;
    }

    public function insertSignature(\DOMElement $domelement)
    {
        $local_private_key = new XMLSecurityKey(XMLSecurityKey::RSA_SHA256, ['type' => 'private']);
        $local_private_key->loadKey(file_get_contents(CONFIG . 'private.key'), false, false);

        $insertAfter = $domelement->firstChild;
        if ($domelement->getElementsByTagName('Issuer')->length > 0) {
            $insertAfter = $domelement->getElementsByTagName('Issuer')->item(0)->nextSibling;
        }

        Utils::insertSignature($local_private_key, [$this->getCertificateFile()], $domelement, $insertAfter);

        return $domelement;
    }

    public function getCertificateFile(): ?string
    {
        return file_get_contents(WWW_ROOT . 'szrc-test.crt');
    }

    public function getCertificateFingerprints()
    {
        return parent::getCertificateFingerprints(); // TODO: Change the autogenerated stub
    }

    public function getCertificateData(): ?string
    {
        $prefix = '-----BEGINCERTIFICATE-----';
        $suffix = '----ENDCERTIFICATE-----';
        $cert_data = $this->getCertificateFile();
        $data = openssl_x509_read($cert_data);
        openssl_x509_export($data, $cert_data);
        $cert_data = trim(preg_replace('/\s+/', '', $cert_data));
        $cert_data = mb_substr($cert_data, strpos($cert_data, $prefix) + strlen($prefix));
        $cert_data = mb_substr($cert_data, 0, strpos($cert_data, $suffix)-1);
        return $cert_data;
    }
}